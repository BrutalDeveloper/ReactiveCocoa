// This is auto-generated by gyb.

import Foundation
import ReactiveSwift
import enum Result.NoError
import AppKit

extension NSLayoutConstraint {

	// constant: CGFloat

	public static func <~ <Signal: SignalProtocol>(
		target: NSLayoutConstraint,
		source: Signal
	) -> Disposable? where Signal.Value == CGFloat, Signal.Error == NoError {
		return target.reactive.constant <~ source
	}

	public static func <~ <Producer: SignalProducerProtocol>(
		target: NSLayoutConstraint,
		source: Producer
	) -> Disposable where Producer.Value == CGFloat, Producer.Error == NoError {
		return target.reactive.constant <~ source
	}

	public static func <~ <Property: PropertyProtocol>(
		target: NSLayoutConstraint,
		source: Property
	) -> Disposable where Property.Value == CGFloat {
		return target.reactive.constant <~ source
	}

	public static func <~ <Provider: DefaultSignalProvider>(
		target: NSLayoutConstraint,
		source: Provider
	) -> Disposable? where Provider.DefaultSignalValue == CGFloat {
		return target.reactive.constant <~ source
	}
}
extension NSControl {

	// stringValue: String

	public static func <~ <Signal: SignalProtocol>(
		target: NSControl,
		source: Signal
	) -> Disposable? where Signal.Value == String, Signal.Error == NoError {
		return target.reactive.stringValue <~ source
	}

	public static func <~ <Producer: SignalProducerProtocol>(
		target: NSControl,
		source: Producer
	) -> Disposable where Producer.Value == String, Producer.Error == NoError {
		return target.reactive.stringValue <~ source
	}

	public static func <~ <Property: PropertyProtocol>(
		target: NSControl,
		source: Property
	) -> Disposable where Property.Value == String {
		return target.reactive.stringValue <~ source
	}

	public static func <~ <Provider: DefaultSignalProvider>(
		target: NSControl,
		source: Provider
	) -> Disposable? where Provider.DefaultSignalValue == String {
		return target.reactive.stringValue <~ source
	}

	// attributedStringValue: NSAttributedString

	public static func <~ <Signal: SignalProtocol>(
		target: NSControl,
		source: Signal
	) -> Disposable? where Signal.Value == NSAttributedString, Signal.Error == NoError {
		return target.reactive.attributedStringValue <~ source
	}

	public static func <~ <Producer: SignalProducerProtocol>(
		target: NSControl,
		source: Producer
	) -> Disposable where Producer.Value == NSAttributedString, Producer.Error == NoError {
		return target.reactive.attributedStringValue <~ source
	}

	public static func <~ <Property: PropertyProtocol>(
		target: NSControl,
		source: Property
	) -> Disposable where Property.Value == NSAttributedString {
		return target.reactive.attributedStringValue <~ source
	}

	public static func <~ <Provider: DefaultSignalProvider>(
		target: NSControl,
		source: Provider
	) -> Disposable? where Provider.DefaultSignalValue == NSAttributedString {
		return target.reactive.attributedStringValue <~ source
	}

	// boolValue: Bool

	public static func <~ <Signal: SignalProtocol>(
		target: NSControl,
		source: Signal
	) -> Disposable? where Signal.Value == Bool, Signal.Error == NoError {
		return target.reactive.boolValue <~ source
	}

	public static func <~ <Producer: SignalProducerProtocol>(
		target: NSControl,
		source: Producer
	) -> Disposable where Producer.Value == Bool, Producer.Error == NoError {
		return target.reactive.boolValue <~ source
	}

	public static func <~ <Property: PropertyProtocol>(
		target: NSControl,
		source: Property
	) -> Disposable where Property.Value == Bool {
		return target.reactive.boolValue <~ source
	}

	public static func <~ <Provider: DefaultSignalProvider>(
		target: NSControl,
		source: Provider
	) -> Disposable? where Provider.DefaultSignalValue == Bool {
		return target.reactive.boolValue <~ source
	}

	// intValue: Int32

	public static func <~ <Signal: SignalProtocol>(
		target: NSControl,
		source: Signal
	) -> Disposable? where Signal.Value == Int32, Signal.Error == NoError {
		return target.reactive.intValue <~ source
	}

	public static func <~ <Producer: SignalProducerProtocol>(
		target: NSControl,
		source: Producer
	) -> Disposable where Producer.Value == Int32, Producer.Error == NoError {
		return target.reactive.intValue <~ source
	}

	public static func <~ <Property: PropertyProtocol>(
		target: NSControl,
		source: Property
	) -> Disposable where Property.Value == Int32 {
		return target.reactive.intValue <~ source
	}

	public static func <~ <Provider: DefaultSignalProvider>(
		target: NSControl,
		source: Provider
	) -> Disposable? where Provider.DefaultSignalValue == Int32 {
		return target.reactive.intValue <~ source
	}

	// integerValue: Int

	public static func <~ <Signal: SignalProtocol>(
		target: NSControl,
		source: Signal
	) -> Disposable? where Signal.Value == Int, Signal.Error == NoError {
		return target.reactive.integerValue <~ source
	}

	public static func <~ <Producer: SignalProducerProtocol>(
		target: NSControl,
		source: Producer
	) -> Disposable where Producer.Value == Int, Producer.Error == NoError {
		return target.reactive.integerValue <~ source
	}

	public static func <~ <Property: PropertyProtocol>(
		target: NSControl,
		source: Property
	) -> Disposable where Property.Value == Int {
		return target.reactive.integerValue <~ source
	}

	public static func <~ <Provider: DefaultSignalProvider>(
		target: NSControl,
		source: Provider
	) -> Disposable? where Provider.DefaultSignalValue == Int {
		return target.reactive.integerValue <~ source
	}

	// doubleValue: Double

	public static func <~ <Signal: SignalProtocol>(
		target: NSControl,
		source: Signal
	) -> Disposable? where Signal.Value == Double, Signal.Error == NoError {
		return target.reactive.doubleValue <~ source
	}

	public static func <~ <Producer: SignalProducerProtocol>(
		target: NSControl,
		source: Producer
	) -> Disposable where Producer.Value == Double, Producer.Error == NoError {
		return target.reactive.doubleValue <~ source
	}

	public static func <~ <Property: PropertyProtocol>(
		target: NSControl,
		source: Property
	) -> Disposable where Property.Value == Double {
		return target.reactive.doubleValue <~ source
	}

	public static func <~ <Provider: DefaultSignalProvider>(
		target: NSControl,
		source: Provider
	) -> Disposable? where Provider.DefaultSignalValue == Double {
		return target.reactive.doubleValue <~ source
	}
}


extension NSTextField: DefaultSignalProvider {
	public var defaultSignal: Signal<String, NoError> {
		return reactive.stringValues
	}
}
